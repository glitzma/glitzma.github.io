(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{475:function(t,a,e){"use strict";e.r(a);var s=e(4),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"redux中的对象说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux中的对象说明"}},[t._v("#")]),t._v(" redux中的对象说明")]),t._v(" "),e("h3",{attrs:{id:"store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" store")]),t._v(" "),e("p",[t._v("store是一个数据仓库，一个应用中的store是唯一的，它里面封装了state状态，当用户想访问state的时候，只能通过store.getState来获取state对象，而取得的对象是一个store的快找，这样就把store对象保护起来。")]),t._v(" "),e("h3",{attrs:{id:"action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" action")]),t._v(" "),e("p",[t._v("action描述了一个更新state的动作，它是一个对象，其中type属性是必须有的，它指定了某动作和要修改的值：")]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\ntype: UPDATE_TITLE_COLOR, playload: 'yellow',\n}\n")])])]),e("h3",{attrs:{id:"actioncreator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#actioncreator"}},[t._v("#")]),t._v(" actionCreator")]),t._v(" "),e("p",[t._v("如果每次派发动作时都写上长长的action对象是很不方便的，而actionCreator就是创建action对象的一个方法，调用这个方法就能返回一个action对象，用于简化代码。")]),t._v(" "),e("h3",{attrs:{id:"dispatch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dispatch"}},[t._v("#")]),t._v(" dispatch")]),t._v(" "),e("p",[t._v("dispatch是一个方法，它用于派发一个动作action，这是唯一的一个能够修改state的方法，它内部会调用reducer来执行不能的逻辑，基于旧的state来更新出一个新的state。")]),t._v(" "),e("h3",{attrs:{id:"reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" reducer")]),t._v(" "),e("p",[t._v("reducer是更新state核心，它里面封装了更新state的逻辑，reducer由外界提供（封装业务逻辑，在createStore时传入),并传入旧state对象和action，将新值更新到旧的state对象上返回。")]),t._v(" "),e("h2",{attrs:{id:"如何使用redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何使用redux"}},[t._v("#")]),t._v(" 如何使用redux")]),t._v(" "),e("ol",[e("li",[t._v("定义动作类型")])]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const INCREAMENT='INCREAMENT';\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("定义项目的默认状态，传入reducer")])]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let iniState={...};\nfunction reducer(state=initState,action){\n    // ...\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("编写reducer,实现更新state的具体逻辑")])]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function reducer(state=initState, action){\n    let newState;\n    switch(action.type){\n        // ...\n    }\n    return newState;\n}\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("创建容器，传入reducer")])]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let store = createStore(reducer);\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("订阅需要的方法，当state改变会自动更新")])]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("store.subcribe(function(){});\n")])])]),e("p",[t._v("6.在需 要更新的state的地方调用dispatch即可")]),t._v(" "),e("div",{staticClass:"language-metadata json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("store.dispatch(/*某个action*/)\n")])])]),e("p",[t._v("可以通过以上步骤使用redux，它只是一种思想，只要符合需求就可以使用redux")]),t._v(" "),e("h2",{attrs:{id:"在react中使用redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在react中使用redux"}},[t._v("#")]),t._v(" 在react中使用redux")])])}),[],!1,null,null,null);a.default=r.exports}}]);