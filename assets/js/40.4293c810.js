(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{549:function(n,t,e){"use strict";e.r(t);var s=e(4),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("##gitignore\n.gitignore 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置 .gitignore 的一些心得。\n1、配置语法：\n　　以斜杠“/”开头表示目录；\n　　以星号“"),e("em",[n._v("”通配多个字符；\n　　以问号“?”通配单个字符\n　　以方括号“[]”包含单个字符的匹配列表；\n　　以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；\n　　\n　　此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；\n2、示例：\n　　（1）规则：fd1/")]),n._v("\n　　　　  说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\n　　（2）规则：/fd1/*\n　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；\n　　（3）规则：\n/*\n!.gitignore\n!/fw/bin/\n!/fw/sf/\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；\n3、在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：")]),n._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 此为注释 – 将被 Git 忽略")]),n._v("\n*.a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 忽略*.o和*.a文件")]),n._v("\n *.[oa]\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 忽略*.b和*.B文件，my.b除外")]),n._v("\n*.[bB]\n!my.b\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 忽略dbg文件和dbg目录")]),n._v("\ndbg\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 只忽略dbg目录，不忽略dbg文件")]),n._v("\ndbg/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 只忽略dbg文件，不忽略dbg目录")]),n._v("\ndbg\n!dbg/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内")]),n._v("\n/dbg\n")])])]),e("p",[n._v("有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git add App.class\nThe following paths are ignored by one of your .gitignore files:\nApp.class\nUse -f if you really want to add them.\n")])])]),e("p",[n._v("如果你确实想添加该文件，可以用-f强制添加到Git：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("git add -f App.class\n")])])]),e("p",[n._v("或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$ git check-ignore -v App.class\n.gitignore:3:*.class    App.class\n")])])]),e("p",[n._v("Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。")]),n._v(" "),e("p",[n._v("规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：")]),n._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[n._v("git rm -r --cached .\ngit add .\ngit commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v("'update .gitignore'")]),n._v("\n")])])]),e("blockquote",[e("p",[n._v("注：gitignore在本地是可以看到效果的，多个文件夹套用需要commit 时才能看到\n我的例子\n!node_modules/\nnode_modules/*\n!node_modules/@nfe/")])])])}),[],!1,null,null,null);t.default=a.exports}}]);