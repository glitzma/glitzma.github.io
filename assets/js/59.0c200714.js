(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{552:function(e,n,t){"use strict";t.r(n);var r=t(7),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"环境搭建-vue"}},[e._v("环境搭建（vue）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 全局安装 vue-cli\n$ npm install --global vue-cli\n# 创建一个基于 webpack 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev\n")])])]),t("p",[e._v("引入axios")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import axios from 'axios'\n\nVue.prototype.$http = axios\n\n// 用法\nthis.$http.get(_self.$host + '/gateway/delegate/sceneaccounts/9753466f-52ae-47bc-866a-34bbfe38abf1/contents/?count=10&start=1', {\n  headers: {\n    guid: 'f14807da-56dc-45'\n  }\n})\n.then(function (response) {\n  Array.prototype.push.apply(_self.$data.sceneaccounts.contents.contentBlocks, response.data.contentBlocks)\n})\n.catch(function (error) {\n  console.log(error)\n})\n")])])]),t("p",[e._v("引入vue-router")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Vue from 'vue'\nimport Router from 'vue-router'\n\n// import xxx from  '@/components/xxx' 中的@表示src\n// 因为webpack.base.conf中别名这样写了==> alias: {'@': resolve('src')}\n\nVue.use(Router)\n\nexport default new Router({\n  // mode: 'history', // 使用history防止url中出现#\n  routes: [\n    {\n      path: '/',\n      name: 'homePage',\n      component: homePage\n    }, {\n      path: '/index.html',\n      name: 'homePage',\n      component: homePage\n    }, {\n      path: '/index.html?downloadApp',\n      name: 'downloadApp',\n      component: downloadApp\n    }, {\n      path: '*',\n      name: 'notFind',\n      component: notFind\n    }\n  ]\n})\n\n//用法\nimport router from './router'\n\nnew Vue({\n  el: '#app',\n  router,\n  store, // 挂载store\n  template: '<App/>',\n  components: { App }\n})\n")])])]),t("p",[e._v("引入vuex")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Vuex from 'vuex'\n\n// 将vuex中的属性分开管理\nconst store = new Vuex.Store({\n  state,\n  getters,\n  actions,\n  mutations\n})\n\nexport default store\n\n//用法\nimport store from './store/index' // 引入store\n\nnew Vue({\n  el: '#app',\n  router,\n  // store, // 挂载store\n  template: '<App/>',\n  components: { App }\n})\n\n")])])]),t("p",[e._v("filter用到的地方很多所以单独拿出来")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// filter文件中\nconst filters = {\n    dateFilter (val) {}\n}\nexport default filters\n\n// main.js中引入filter\nimport filters from './filter/filter' // 引入filter\n\n// 公开注册全局filter\nVue.filter('dateFilter', filters.dateFilter)\n\n//用法\n{{createTime | dateFilter}}\n")])])]),t("h2",{attrs:{id:"开发完成后-上线部署"}},[e._v("开发完成后，上线部署")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("npm run build")])]),e._v(" "),t("li",[t("p",[e._v("测试环境放了一个临时存放的 serve.js")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var http = require('http'),\n   url = require('url'),\n   path=require('path'),\n   fs=require('fs'),\n   httpProxy = require('http-proxy'),\n   mine=require('./mine').types;\n\n//\n// Create a proxy server with latency\n//\nvar proxy = httpProxy.createProxyServer({\n   //target: 'http://xptest.tianxialashou.com.cn',   //接口地址\n   target: 'http://10.1.36.221:8086',   //接口地址\n   // 下面的设置用于https\n   // ssl: {\n   //     key: fs.readFileSync('server_decrypt.key', 'utf8'),\n   //     cert: fs.readFileSync('server.crt', 'utf8')\n   // },\n   // secure: false\n});\n\n//\n// Listen for the `proxyRes` event on `proxy`.\n//\nproxy.on('proxyRes', function (proxyRes, req, res) {\n console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));\n});\n\n//\n// Listen for the `open` event on `proxy`.\n//\nproxy.on('open', function (proxySocket) {\n // listen for messages coming FROM the target here\n proxySocket.on('data', hybiParseAndLogMessage);\n});\n\n//\n// Listen for the `close` event on `proxy`.\n//\nproxy.on('close', function (res, socket, head) {\n // view disconnected websocket connections\n console.log('Client disconnected');\n});\n\n\nvar PORT = 3000;\n\n//\n// Create your server that makes an operation that waits a while\n// and then proxies the request\n//\n\nvar server = http.createServer(function (request, response) {\n   var pathname = url.parse(request.url).pathname;\n   //var realPath = path.join(\"main-pages\", pathname); // 指定根目录\n\n if (path.extname(pathname)==\"\") {\n   pathname+=\"/\";\n }\n if (pathname.charAt(pathname.length-1)==\"/\"){\n   pathname+=\"index.html\";\n }\n\n\n   var realPath = path.join(\"./\", pathname);\n   console.log(pathname);\n   console.log(realPath);\n   var ext = path.extname(realPath);\n   ext = ext ? ext.slice(1) : 'unknown';\n console.log(pathname,'-----------------------------');\n\n   //判断如果是接口访问，则通过proxy转发\n   if(pathname.match(/\\/gateway\\//)){\n       delete request.headers.host;\n       proxy.web(request, response);\n       // response.end();\n       return;\n   }\n\n   fs.exists(realPath, function (exists) {\n       if (!exists) {\n           response.writeHead(404, {\n               'Content-Type': 'text/plain'\n           });\n\n           response.write(\"This request URL \" + pathname + \" was not found on this server.\");\n           response.end();\n       } else {\n           fs.readFile(realPath, \"binary\", function (err, file) {\n               if (err) {\n                   response.writeHead(500, {\n                       'Content-Type': 'text/plain'\n                   });\n                   response.end(err);\n               } else {\n                   var contentType = mine[ext] || \"text/plain\";\n                   response.writeHead(200, {\n                       'Content-Type': contentType\n                   });\n                   response.write(file, \"binary\");\n                   response.end();\n               }\n           });\n       }\n   });\n});\nserver.listen(PORT);\nconsole.log(\"Server runing at port: \" + PORT + \".\");\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("遇到问题")]),e._v(" "),t("p",[e._v("程序运行起来，有可能想访问某个页面，比如直接访问下载页面。但会解析不到。那是因为用的history方式\n如果将router的mode删除则默认是hash模式，此时就可以访问单独页面了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" new Router({\n  // mode: 'history', // 使用history防止url中出现#\n })\n")])])])]),e._v(" "),t("li",[t("p",[e._v("正式环境部署")]),e._v(" "),t("p",[e._v("随便启动一个服务，将build出的代码放入。直接访问即可。如有跨域，在服务器的niginx中配置proxy")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);